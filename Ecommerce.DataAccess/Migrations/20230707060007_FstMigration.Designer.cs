// <auto-generated />
using Ecommerce.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230707060007_FstMigration")]
    partial class FstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Models.TbAbout", b =>
                {
                    b.Property<int>("AboutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AboutId"));

                    b.Property<int>("AboutAwardsWinned")
                        .HasColumnType("int");

                    b.Property<int>("AboutCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("AboutDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AboutDescriptionImg")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AboutHappyCustomer")
                        .HasColumnType("int");

                    b.Property<int>("AboutHoursWorked")
                        .HasColumnType("int");

                    b.Property<int>("AboutProjectDone")
                        .HasColumnType("int");

                    b.Property<string>("AboutTitelDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AboutUsImg")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AboutId");

                    b.ToTable("TbAbouts");

                    b.HasData(
                        new
                        {
                            AboutId = 1,
                            AboutAwardsWinned = 10,
                            AboutCurrentState = 1,
                            AboutDescription = "وصف المعلومات عنا",
                            AboutDescriptionImg = "about_description_img.jpg",
                            AboutHappyCustomer = 100,
                            AboutHoursWorked = 5000,
                            AboutProjectDone = 50,
                            AboutTitelDescription = "عنوان الوصف",
                            AboutUsImg = "about_img.jpg"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.TbCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<int>("CategoryCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("TbCategorys");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryCurrentState = 1,
                            CategoryName = "Action",
                            DepartmentId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryCurrentState = 2,
                            CategoryName = "SciFi",
                            DepartmentId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryCurrentState = 3,
                            CategoryName = "History",
                            DepartmentId = 2
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryCurrentState = 4,
                            CategoryName = "Comedy",
                            DepartmentId = 2
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryCurrentState = 5,
                            CategoryName = "Drama",
                            DepartmentId = 3
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.TbCompanyInformation", b =>
                {
                    b.Property<int>("CompanyInformationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyInformationID"));

                    b.Property<string>("CompanyInformationAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CompanyInformationCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("CompanyInformationDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyInformationEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyInformationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyInformationPhone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("CompanyInformationID");

                    b.ToTable("TbCompanyInformations");

                    b.HasData(
                        new
                        {
                            CompanyInformationID = 1,
                            CompanyInformationAddress = "عنوان الشركة",
                            CompanyInformationCurrentState = 1,
                            CompanyInformationDescription = "وصف الشركة",
                            CompanyInformationEmail = "company@example.com",
                            CompanyInformationName = "اسم الشركة",
                            CompanyInformationPhone = "1234567890"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.TbCurrency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"));

                    b.Property<int>("CompanyInformationID")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CurrencyId");

                    b.HasIndex("CompanyInformationID");

                    b.ToTable("TbCurrencys");

                    b.HasData(
                        new
                        {
                            CurrencyId = 1,
                            CompanyInformationID = 1,
                            CurrencyCurrentState = 1,
                            CurrencyName = "SDG"
                        },
                        new
                        {
                            CurrencyId = 2,
                            CompanyInformationID = 1,
                            CurrencyCurrentState = 1,
                            CurrencyName = "USD"
                        },
                        new
                        {
                            CurrencyId = 3,
                            CompanyInformationID = 1,
                            CurrencyCurrentState = 1,
                            CurrencyName = "SAR"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.TbDepartment", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("DepartmentCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentId");

                    b.ToTable("TbDepartments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentCurrentState = 1,
                            DepartmentName = "Action"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentCurrentState = 2,
                            DepartmentName = "SciFi"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentCurrentState = 3,
                            DepartmentName = "History"
                        },
                        new
                        {
                            DepartmentId = 4,
                            DepartmentCurrentState = 4,
                            DepartmentName = "Comedy"
                        },
                        new
                        {
                            DepartmentId = 5,
                            DepartmentCurrentState = 5,
                            DepartmentName = "Drama"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.TbImageTool", b =>
                {
                    b.Property<int>("ImageTool")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageTool"));

                    b.Property<int>("ImageCurrentState")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<string>("ToolProductImgPrimary")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToolProductImgSecondry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ImageTool");

                    b.HasIndex("ToolId");

                    b.ToTable("TbImageTools");

                    b.HasData(
                        new
                        {
                            ImageTool = 1,
                            ImageCurrentState = 1,
                            ToolId = 1,
                            ToolProductImgPrimary = "image1.jpg",
                            ToolProductImgSecondry = "image1_secondary.jpg"
                        },
                        new
                        {
                            ImageTool = 2,
                            ImageCurrentState = 1,
                            ToolId = 1,
                            ToolProductImgPrimary = "image2.jpg",
                            ToolProductImgSecondry = "image2_secondary.jpg"
                        },
                        new
                        {
                            ImageTool = 3,
                            ImageCurrentState = 1,
                            ToolId = 2,
                            ToolProductImgPrimary = "image3.jpg",
                            ToolProductImgSecondry = "image3_secondary.jpg"
                        },
                        new
                        {
                            ImageTool = 4,
                            ImageCurrentState = 1,
                            ToolId = 3,
                            ToolProductImgPrimary = "image4.jpg",
                            ToolProductImgSecondry = "image4_secondary.jpg"
                        },
                        new
                        {
                            ImageTool = 5,
                            ImageCurrentState = 1,
                            ToolId = 4,
                            ToolProductImgPrimary = "image5.jpg",
                            ToolProductImgSecondry = "image5_secondary.jpg"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.TbLanguage", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<int>("CompanyInformationID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("LanguageId");

                    b.HasIndex("CompanyInformationID");

                    b.ToTable("TbLanguages");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            CompanyInformationID = 1,
                            LanguageCurrentState = 1,
                            LanguageName = "عربي"
                        },
                        new
                        {
                            LanguageId = 2,
                            CompanyInformationID = 1,
                            LanguageCurrentState = 1,
                            LanguageName = "English"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.TbTeam", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int>("AboutId")
                        .HasColumnType("int");

                    b.Property<string>("TeamDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TeamImg")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TeamTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TeamId");

                    b.HasIndex("AboutId");

                    b.ToTable("TbTeams");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            AboutId = 1,
                            TeamDescription = "وصف العضو 1",
                            TeamImg = "team_img1.jpg",
                            TeamName = "عضو الفريق 1",
                            TeamTitle = "مسمى الفريق 1"
                        },
                        new
                        {
                            TeamId = 2,
                            AboutId = 1,
                            TeamDescription = "وصف العضو 2",
                            TeamImg = "team_img2.jpg",
                            TeamName = "عضو الفريق 2",
                            TeamTitle = "مسمى الفريق 2"
                        },
                        new
                        {
                            TeamId = 3,
                            AboutId = 1,
                            TeamDescription = "وصف العضو 3",
                            TeamImg = "team_img3.jpg",
                            TeamName = "عضو الفريق 3",
                            TeamTitle = "مسمى الفريق 3"
                        },
                        new
                        {
                            TeamId = 4,
                            AboutId = 1,
                            TeamDescription = "وصف العضو 4",
                            TeamImg = "team_img4.jpg",
                            TeamName = "عضو الفريق 4",
                            TeamTitle = "مسمى الفريق 4"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.TbTellUs", b =>
                {
                    b.Property<int>("TellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TellId"));

                    b.Property<int>("TellCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("TellEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TellMessage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TellName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TellSubject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TellId");

                    b.ToTable("TbTellUss");

                    b.HasData(
                        new
                        {
                            TellId = 1,
                            TellCurrentState = 1,
                            TellEmail = "example@example.com",
                            TellMessage = "نص الرسالة",
                            TellName = "اسمك",
                            TellSubject = "عنوان الرسالة"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.TbTool", b =>
                {
                    b.Property<int>("ToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToolId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ToolCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("ToolDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ToolProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ToolSticker")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ToolId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TbTools");

                    b.HasData(
                        new
                        {
                            ToolId = 1,
                            CategoryId = 1,
                            ToolCurrentState = 1,
                            ToolDescription = "A heavy-duty hammer for construction work",
                            ToolName = "Hammer",
                            ToolProductPrice = 10.99m,
                            ToolSticker = "A1"
                        },
                        new
                        {
                            ToolId = 2,
                            CategoryId = 1,
                            ToolCurrentState = 1,
                            ToolDescription = "A versatile screwdriver for various tasks",
                            ToolName = "Screwdriver",
                            ToolProductPrice = 5.99m,
                            ToolSticker = "B1"
                        },
                        new
                        {
                            ToolId = 3,
                            CategoryId = 2,
                            ToolCurrentState = 1,
                            ToolDescription = "A powerful telescope for stargazing",
                            ToolName = "Telescope",
                            ToolProductPrice = 99.99m,
                            ToolSticker = "C1"
                        },
                        new
                        {
                            ToolId = 4,
                            CategoryId = 2,
                            ToolCurrentState = 1,
                            ToolDescription = "A high-resolution camera for capturing moments",
                            ToolName = "Camera",
                            ToolProductPrice = 199.99m,
                            ToolSticker = "D1"
                        },
                        new
                        {
                            ToolId = 5,
                            CategoryId = 3,
                            ToolCurrentState = 1,
                            ToolDescription = "An informative book on historical events",
                            ToolName = "Book",
                            ToolProductPrice = 19.99m,
                            ToolSticker = "E1"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.TbCategory", b =>
                {
                    b.HasOne("Ecommerce.Models.TbDepartment", "_TbDepartment")
                        .WithMany("_TbCategory")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TbDepartment");
                });

            modelBuilder.Entity("Ecommerce.Models.TbCurrency", b =>
                {
                    b.HasOne("Ecommerce.Models.TbCompanyInformation", "_TbCompanyInformation")
                        .WithMany("_TbCurrency")
                        .HasForeignKey("CompanyInformationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TbCompanyInformation");
                });

            modelBuilder.Entity("Ecommerce.Models.TbImageTool", b =>
                {
                    b.HasOne("Ecommerce.Models.TbTool", "_TbTool")
                        .WithMany("_TbImageTool")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TbTool");
                });

            modelBuilder.Entity("Ecommerce.Models.TbLanguage", b =>
                {
                    b.HasOne("Ecommerce.Models.TbCompanyInformation", "_TbCompanyInformation")
                        .WithMany("_TbLanguage")
                        .HasForeignKey("CompanyInformationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TbCompanyInformation");
                });

            modelBuilder.Entity("Ecommerce.Models.TbTeam", b =>
                {
                    b.HasOne("Ecommerce.Models.TbAbout", "_TbAbout")
                        .WithMany("_TbTeam")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TbAbout");
                });

            modelBuilder.Entity("Ecommerce.Models.TbTool", b =>
                {
                    b.HasOne("Ecommerce.Models.TbCategory", "_TbCategory")
                        .WithMany("_TbTool")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TbCategory");
                });

            modelBuilder.Entity("Ecommerce.Models.TbAbout", b =>
                {
                    b.Navigation("_TbTeam");
                });

            modelBuilder.Entity("Ecommerce.Models.TbCategory", b =>
                {
                    b.Navigation("_TbTool");
                });

            modelBuilder.Entity("Ecommerce.Models.TbCompanyInformation", b =>
                {
                    b.Navigation("_TbCurrency");

                    b.Navigation("_TbLanguage");
                });

            modelBuilder.Entity("Ecommerce.Models.TbDepartment", b =>
                {
                    b.Navigation("_TbCategory");
                });

            modelBuilder.Entity("Ecommerce.Models.TbTool", b =>
                {
                    b.Navigation("_TbImageTool");
                });
#pragma warning restore 612, 618
        }
    }
}
