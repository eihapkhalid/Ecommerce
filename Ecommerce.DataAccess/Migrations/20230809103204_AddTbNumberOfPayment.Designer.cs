// <auto-generated />
using System;
using Ecommerce.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230809103204_AddTbNumberOfPayment")]
    partial class AddTbNumberOfPayment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Models.TbAbout", b =>
                {
                    b.Property<int>("AboutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AboutId"));

                    b.Property<int>("AboutAwardsWinned")
                        .HasColumnType("int");

                    b.Property<int>("AboutCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("AboutDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("AboutDescriptionImg")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AboutHappyCustomer")
                        .HasColumnType("int");

                    b.Property<int>("AboutHoursWorked")
                        .HasColumnType("int");

                    b.Property<int>("AboutProjectDone")
                        .HasColumnType("int");

                    b.Property<string>("AboutTitelDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AboutUsImg")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AboutId");

                    b.ToTable("TbAbouts");
                });

            modelBuilder.Entity("Ecommerce.Models.TbCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<int>("CategoryCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("TbCategorys");
                });

            modelBuilder.Entity("Ecommerce.Models.TbCompanyInformation", b =>
                {
                    b.Property<int>("CompanyInformationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyInformationID"));

                    b.Property<string>("CompanyInformationAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CompanyInformationCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("CompanyInformationDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyInformationEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyInformationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyInformationPhone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.HasKey("CompanyInformationID");

                    b.ToTable("TbCompanyInformations");
                });

            modelBuilder.Entity("Ecommerce.Models.TbCurrency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"));

                    b.Property<int>("CompanyInformationID")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CurrencyId");

                    b.HasIndex("CompanyInformationID");

                    b.ToTable("TbCurrencys");
                });

            modelBuilder.Entity("Ecommerce.Models.TbDealOfTheDay", b =>
                {
                    b.Property<int>("DealOfTheDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealOfTheDayId"));

                    b.Property<DateTime>("DealOfTheDayToolDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DealOfTheDayToolProductNewPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DealOfTheDayToolrate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DealOfTheDayId");

                    b.ToTable("TbDealOfTheDays");
                });

            modelBuilder.Entity("Ecommerce.Models.TbDepartment", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("DepartmentCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentId");

                    b.ToTable("TbDepartments");
                });

            modelBuilder.Entity("Ecommerce.Models.TbImageTool", b =>
                {
                    b.Property<int>("ImageTool")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageTool"));

                    b.Property<int>("ImageCurrentState")
                        .HasColumnType("int");

                    b.Property<int>("ToolId")
                        .HasColumnType("int");

                    b.Property<string>("ToolProductImgPrimary")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToolProductImgSecondry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ImageTool");

                    b.HasIndex("ToolId");

                    b.ToTable("TbImageTools");
                });

            modelBuilder.Entity("Ecommerce.Models.TbLanguage", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<int>("CompanyInformationID")
                        .HasColumnType("int");

                    b.Property<int>("LanguageCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("LanguageId");

                    b.HasIndex("CompanyInformationID");

                    b.ToTable("TbLanguages");
                });

            modelBuilder.Entity("Ecommerce.Models.TbNewArrivalProduct", b =>
                {
                    b.Property<int>("NewArrivalProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewArrivalProductId"));

                    b.Property<int>("NewArrivalProductCurrentState")
                        .HasColumnType("int");

                    b.HasKey("NewArrivalProductId");

                    b.ToTable("TbNewArrivalProducts");
                });

            modelBuilder.Entity("Ecommerce.Models.TbNumberOfPayment", b =>
                {
                    b.Property<int>("NumberOfPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NumberOfPaymentId"));

                    b.Property<int>("ToolCurrentState")
                        .HasColumnType("int");

                    b.HasKey("NumberOfPaymentId");

                    b.ToTable("TbNumberOfPayments");
                });

            modelBuilder.Entity("Ecommerce.Models.TbTeam", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int>("AboutId")
                        .HasColumnType("int");

                    b.Property<string>("TeamDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TeamImg")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TeamTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TeamId");

                    b.HasIndex("AboutId");

                    b.ToTable("TbTeams");
                });

            modelBuilder.Entity("Ecommerce.Models.TbTellUs", b =>
                {
                    b.Property<int>("TellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TellId"));

                    b.Property<int>("TellCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("TellEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TellMessage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TellName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TellSubject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TellId");

                    b.ToTable("TbTellUss");
                });

            modelBuilder.Entity("Ecommerce.Models.TbTool", b =>
                {
                    b.Property<int>("ToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToolId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("DealOfTheDayId")
                        .HasColumnType("int");

                    b.Property<int?>("NewArrivalProductId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfPaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ToolCurrentState")
                        .HasColumnType("int");

                    b.Property<string>("ToolDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ToolProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ToolSticker")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ToolId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DealOfTheDayId");

                    b.HasIndex("NewArrivalProductId");

                    b.HasIndex("NumberOfPaymentId");

                    b.ToTable("TbTools");
                });

            modelBuilder.Entity("Ecommerce.Models.TbCategory", b =>
                {
                    b.HasOne("Ecommerce.Models.TbDepartment", "_TbDepartment")
                        .WithMany("_TbCategory")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TbDepartment");
                });

            modelBuilder.Entity("Ecommerce.Models.TbCurrency", b =>
                {
                    b.HasOne("Ecommerce.Models.TbCompanyInformation", "_TbCompanyInformation")
                        .WithMany("_TbCurrency")
                        .HasForeignKey("CompanyInformationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TbCompanyInformation");
                });

            modelBuilder.Entity("Ecommerce.Models.TbImageTool", b =>
                {
                    b.HasOne("Ecommerce.Models.TbTool", "_TbTool")
                        .WithMany("_TbImageTool")
                        .HasForeignKey("ToolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TbTool");
                });

            modelBuilder.Entity("Ecommerce.Models.TbLanguage", b =>
                {
                    b.HasOne("Ecommerce.Models.TbCompanyInformation", "_TbCompanyInformation")
                        .WithMany("_TbLanguage")
                        .HasForeignKey("CompanyInformationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TbCompanyInformation");
                });

            modelBuilder.Entity("Ecommerce.Models.TbTeam", b =>
                {
                    b.HasOne("Ecommerce.Models.TbAbout", "_TbAbout")
                        .WithMany("_TbTeam")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TbAbout");
                });

            modelBuilder.Entity("Ecommerce.Models.TbTool", b =>
                {
                    b.HasOne("Ecommerce.Models.TbCategory", "_TbCategory")
                        .WithMany("_TbTool")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.TbDealOfTheDay", "_TbDealOfTheDay")
                        .WithMany("_TbTool")
                        .HasForeignKey("DealOfTheDayId");

                    b.HasOne("Ecommerce.Models.TbNewArrivalProduct", "_TbNewArrivalProduct")
                        .WithMany("_TbTool")
                        .HasForeignKey("NewArrivalProductId");

                    b.HasOne("Ecommerce.Models.TbNumberOfPayment", "_TbNumberOfPayment")
                        .WithMany("_TbTool")
                        .HasForeignKey("NumberOfPaymentId");

                    b.Navigation("_TbCategory");

                    b.Navigation("_TbDealOfTheDay");

                    b.Navigation("_TbNewArrivalProduct");

                    b.Navigation("_TbNumberOfPayment");
                });

            modelBuilder.Entity("Ecommerce.Models.TbAbout", b =>
                {
                    b.Navigation("_TbTeam");
                });

            modelBuilder.Entity("Ecommerce.Models.TbCategory", b =>
                {
                    b.Navigation("_TbTool");
                });

            modelBuilder.Entity("Ecommerce.Models.TbCompanyInformation", b =>
                {
                    b.Navigation("_TbCurrency");

                    b.Navigation("_TbLanguage");
                });

            modelBuilder.Entity("Ecommerce.Models.TbDealOfTheDay", b =>
                {
                    b.Navigation("_TbTool");
                });

            modelBuilder.Entity("Ecommerce.Models.TbDepartment", b =>
                {
                    b.Navigation("_TbCategory");
                });

            modelBuilder.Entity("Ecommerce.Models.TbNewArrivalProduct", b =>
                {
                    b.Navigation("_TbTool");
                });

            modelBuilder.Entity("Ecommerce.Models.TbNumberOfPayment", b =>
                {
                    b.Navigation("_TbTool");
                });

            modelBuilder.Entity("Ecommerce.Models.TbTool", b =>
                {
                    b.Navigation("_TbImageTool");
                });
#pragma warning restore 612, 618
        }
    }
}
